{{- define "template.Deployment.go.grpc.healthcheck" -}}
readinessProbe:
  exec:
    command:
    - grpc_health_probe
    - -addr=:6789
  initialDelaySeconds: {{ .Values.Deployment.initialDelaySeconds }}
  failureThreshold: 1
  periodSeconds: 3
  successThreshold: 2
  timeoutSeconds: 1
livenessProbe:
  exec:
    command:
    - grpc_health_probe
    - -addr=:6789
  initialDelaySeconds: {{ .Values.Deployment.initialDelaySeconds }}
  failureThreshold: 3
  periodSeconds: 3
  successThreshold: 1
  timeoutSeconds: 1
{{- end -}}

{{- define "template.statefulset.go.grpc.healthcheck" -}}
readinessProbe:
  exec:
    command:
    - grpc_health_probe
    - -addr=:6789
  initialDelaySeconds: {{ .Values.statefulset.initialDelaySeconds }}
  failureThreshold: 1
  periodSeconds: 3
  successThreshold: 2
  timeoutSeconds: 1
livenessProbe:
  exec:
    command:
    - grpc_health_probe
    - -addr=:6789
  initialDelaySeconds: {{ .Values.statefulset.initialDelaySeconds }}
  failureThreshold: 3
  periodSeconds: 3
  successThreshold: 1
  timeoutSeconds: 1
{{- end -}}

{{- define "template.statefulset.http.healthcheck" -}}
readinessProbe:
  failureThreshold: {{ .Values.statefulset.readinessProbe.failureThreshold }}
  httpGet:
    path: {{ .Values.statefulset.readinessProbe.path }}
    port: {{ .Values.statefulset.readinessProbe.port }}
    scheme: HTTP
  initialDelaySeconds: {{ .Values.statefulset.readinessProbe.initialDelaySeconds }}
  periodSeconds: {{ .Values.statefulset.readinessProbe.periodSeconds }}
  successThreshold: {{ .Values.statefulset.readinessProbe.successThreshold }}
  timeoutSeconds: {{ .Values.statefulset.readinessProbe.timeoutSeconds }}
livenessProbe:
  failureThreshold: {{ .Values.statefulset.livenessProbe.failureThreshold }}
  httpGet:
    path: {{ .Values.statefulset.livenessProbe.path }}
    port: {{ .Values.statefulset.livenessProbe.port }}
    scheme: HTTP
  initialDelaySeconds: {{ .Values.statefulset.livenessProbe.initialDelaySeconds }}
  periodSeconds: {{ .Values.statefulset.livenessProbe.periodSeconds }}
  successThreshold: {{ .Values.statefulset.livenessProbe.successThreshold }}
  timeoutSeconds: {{ .Values.statefulset.livenessProbe.timeoutSeconds }}
{{- end -}}

{{- define "template.Deployment.http.healthcheck" -}}
readinessProbe:
  failureThreshold: {{ .Values.Deployment.readinessProbe.failureThreshold }}
  httpGet:
    path: {{ .Values.Deployment.readinessProbe.path }}
    port: {{ .Values.Deployment.readinessProbe.port }}
    scheme: HTTP
  initialDelaySeconds: {{ .Values.Deployment.readinessProbe.initialDelaySeconds }}
  periodSeconds: {{ .Values.Deployment.readinessProbe.periodSeconds }}
  successThreshold: {{ .Values.Deployment.readinessProbe.successThreshold }}
  timeoutSeconds: {{ .Values.Deployment.readinessProbe.timeoutSeconds }}
livenessProbe:
  failureThreshold: {{ .Values.Deployment.livenessProbe.failureThreshold }}
  httpGet:
    path: {{ .Values.Deployment.livenessProbe.path }}
    port: {{ .Values.Deployment.livenessProbe.port }}
    scheme: HTTP
  initialDelaySeconds: {{ .Values.Deployment.livenessProbe.initialDelaySeconds }}
  periodSeconds: {{ .Values.Deployment.livenessProbe.periodSeconds }}
  successThreshold: {{ .Values.Deployment.livenessProbe.successThreshold }}
  timeoutSeconds: {{ .Values.Deployment.livenessProbe.timeoutSeconds }}
{{- end -}}

{{- define "template.Deployment.sps" -}}
- name: sps
  image: "{{ .Values.Deployment.sps.image.repository }}:{{ .Values.Deployment.sps.image.tag }}"
  imagePullPolicy: Always
  ports:
  - containerPort: 9093
{{- end -}}

{{- define "template.Deployment" -}}
{{- if eq .Values.Deployment.enable true }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.nameOverride | default .Chart.Name }}
spec:
  {{- if .Values.Deployment.progressDeadlineSeconds}}  
  progressDeadlineSeconds: {{ .Values.Deployment.progressDeadlineSeconds }}
  {{- end }}
  {{- if .Values.Deployment.revisionHistoryLimit}}  
  revisionHistoryLimit: {{ .Values.Deployment.revisionHistoryLimit }}
  {{- end }}
  replicas: {{ .Values.Deployment.replicas }}
  selector: 
    matchLabels:
      app: {{ .Values.nameOverride | default .Chart.Name }}
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: {{ .Values.nameOverride | default .Chart.Name }}
        {{- if .Values.Deployment.labels}}  
        {{- with .Values.Deployment.labels }}
          {{- toYaml . | nindent 8 }}
        {{- end }}
        {{- end }}      
      {{- if .Values.Deployment.annotations}}  
      {{- with .Values.Deployment.annotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- end }}   
    spec:
      containers: 
      - name: {{ .Values.nameOverride | default .Chart.Name }}
        image: {{ .Values.Deployment.image.repository }}:{{ .Values.Deployment.image.tag | default .Chart.AppVersion }}
        imagePullPolicy: {{ .Values.Deployment.imagePullPolicy }}
      {{- if .Values.Deployment.command}}  
      {{- with .Values.Deployment.command }}
        command: {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- end }} 
      {{- if .Values.resources}}
        resources:
          {{- if .Values.resources.requests}}
          requests:
          {{- range .Values.resources.requests }}
            {{- with . }}
            cpu: {{ .cpu }}
            memory: {{ .memory }}   
            {{- end }}
        {{- end }}
        {{- end }}
        {{- if .Values.resources.limits}}
        limits:
        {{- range .Values.resources.limits }}
          {{- with . }}
          cpu: {{ .cpu }}
          memory: {{ .memory }}   
          {{- end }}
        {{- end }}
        {{- end }}
      {{- end }}  
        ports: 
        {{- range .Values.Deployment.containerPort }}
        - containerPort: {{ . }}
        {{- end }}
        {{- if eq .Values.Deployment.healthcheckType "http" }}
        {{- include "template.Deployment.http.healthcheck" . | nindent 8 }}
        {{- else if eq .Values.Deployment.healthcheckType "grpc" }}
        {{- include "template.Deployment.grpc.healthcheck" . | nindent 8 }}
        {{- end }}
      {{- if .Values.Lifecycle }}
      {{- with .Values.Lifecycle.prestop }}
        lifecycle:
          preStop:
            exec:
              command:
                - /bin/sh
                - -c
                - {{- toYaml . | indent 1 }}
      {{- end }}
      {{- end }}
        envFrom:
        {{- range .Values.Deployment.configMapRef }}
        - configMapRef:
            name: {{ . }}
        {{- end }}
        {{- range .Values.Deployment.secretRef }}
        - secretRef:
            name: {{ . }}
        {{- end }}
        {{- if eq .Values.Mount.enable true }}
        volumeMounts:
        {{- range .Values.filelist }}
          {{- with . }}
        - mountPath: {{ .path }}   
          name: {{ .name }}
          {{- if  .subPath  }}
          subPath: {{ .subPath }}   
          {{- end }}
          {{- end }}
        {{- end }}
        {{- end }}
      {{- if .Values.Deployment.sps}}  
      {{- include "template.Deployment.sps" . | nindent 6 }}
      {{- end }}
      imagePullSecrets:
      - name: docker-pull-cred     
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 50
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - {{ .Values.nameOverride | default .Chart.Name }}
              topologyKey: "kubernetes.io/hostname"
      serviceAccountName: {{ .Values.Deployment.serviceAccountName | default "default"}}
      {{- if eq .Values.Volumes.enable true }}
      volumes:
      {{- range .Values.MultiConfigMap }}
      - configMap:
          name: {{ . }}
        name: {{ . }}
      {{- end }}
      {{- range .Values.MultiSecret }}
      - secret:
          secretName: {{ . }}
        name: {{ . }}
      {{- end }}
      {{- end }}
{{- end }}
{{- if eq .Values.statefulset.enable true }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Values.nameOverride | default .Chart.Name }}
spec:
  replicas: {{ .Values.statefulset.replicas }}
  updateStrategy:
    type: RollingUpdate
  serviceName: {{ .Values.statefulset.nameOverride | default .Chart.Name }}
  selector: 
    matchLabels:
      app: {{ .Values.nameOverride | default .Chart.Name }}
  template:
    metadata:
      labels:
        app: {{ .Values.nameOverride | default .Chart.Name }}
      {{- if .Values.statefulset.annotations}}  
      {{- with .Values.statefulset.annotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- end }}   
    spec:
      containers: 
      - name: {{ .Values.nameOverride | default .Chart.Name }}
        image: {{ .Values.statefulset.image.repository }}:{{ .Values.statefulset.image.tag | default .Chart.AppVersion }}
        imagePullPolicy: {{ .Values.statefulset.imagePullPolicy }}
        ports: 
        {{- range .Values.statefulset.containerPort }}
        - containerPort: {{ . }}
        {{- end }}
        {{- if eq .Values.statefulset.healthcheckType "http" }}
        {{- include "template.statefulset.http.healthcheck" . | nindent 8 }}
        {{- else if eq .Values.statefulset.healthcheckType "grpc" }}
        {{- include "template.statefulset.grpc.healthcheck" . | nindent 8 }}
        {{- end }}
        envFrom:
        {{- range .Values.statefulset.configMapRef }}
        - configMapRef:
            name: {{ . }}
        {{- end }}
        {{- range .Values.statefulset.secretRef }}
        - secretRef:
            name: {{ . }}
        {{- end }}
        {{- if eq .Values.Mount.enable true }}
        volumeMounts:
        {{- range .Values.filelist }}
          {{- with . }}
        - mountPath: {{ .path }}   
          name: {{ .name }}
          {{- end }}
        {{- end }}
        {{- end }}
      {{- if .Values.statefulset.sps}}  
      {{- include "template.statefulset.sps" . | nindent 6 }}
      {{- end }}
      imagePullSecrets:
      - name: docker-pull-cred
      serviceAccountName: {{ .Values.statefulset.serviceAccountName | default "default"}}
      {{- if eq .Values.Volumes.enable true }}
      volumes:
      {{- range .Values.MultiConfigMap }}
      - configMap:
          name: {{ . }}
        name: {{ . }}
      {{- end }}
      {{- range .Values.MultiSecret }}
      - secret:
          secretName: {{ . }}
        name: {{ . }}
      {{- end }}
      {{- end }}
{{- end }}
{{- end -}}